/*
 * 算法步骤:
 * 1)将原始数据按列组成n行m列矩阵X
 * 2)特征中心化。即每一维的数据都减去该维的均值\t使每一维的均值都为0
 * 3)求出协方差矩阵
 * 4)求出协方差矩阵的特征值及对应的特征向量
 * 5)将特征向量按对应的特征值大小从上往下按行排列成矩阵\t取前k行组成矩阵p
 * 6)Y=PX 即为降维到k维后的数据
 */
package net.zhaoxuyang.demo.rmi.pca.server;

import Jama.Matrix;
import java.io.Serializable;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import net.zhaoxuyang.demo.rmi.pca.PcaService;


public class PcaServiceImpl extends UnicastRemoteObject implements PcaService,Serializable{

    public PcaServiceImpl() throws RemoteException{
    }
    
    public static void main(String[] args) throws RemoteException{
        new PcaServiceImpl().pca(getdatas(),0.98);
    }
    
    @Override
    public double[][] pca(double[][] primaryArray, Double threshold) throws RemoteException{
        if (threshold == null || (threshold < 0 || threshold > 1)) {
            threshold = 0.9;
        }
        System.out.println("输入数据： ");
        System.out.println("色调\tL\tA\tB\tc\th\t△E\t总酚\t酒石酸酯\t黄酮醇\t总花色苷\t单体花色苷\t多聚体花色苷\t辅色素\t离子化指数\t总单宁\t盐酸指数\tDPPH");
        print(primaryArray);

        double[][] averageArray = this.changeAverageToZero(primaryArray);
        System.out.println("均值0化后的数据: " + averageArray.length + "行\t" + averageArray[0].length + "列");
        print(averageArray);

        double[][] varMatrix = this.getVarianceMatrix(averageArray);
        System.out.println("协方差矩阵: ");
        print(varMatrix);

        double[][] eigenvalueMatrix = this.getEigenvalueMatrix(varMatrix);
        System.out.println("特征值矩阵: ");
        print(eigenvalueMatrix);

        double[][] eigenVectorMatrix = this.getEigenVectorMatrix(varMatrix);
        System.out.println("特征向量矩阵: ");
        print(eigenVectorMatrix);

        Matrix principalMatrix = this.getPrincipalComponent(primaryArray, eigenvalueMatrix, eigenVectorMatrix, threshold);
        System.out.println("主成分矩阵: ");
        principalMatrix.print(6, 6);
        System.out.println("----------------------------");

        Matrix resultMatrix = this.getResult(averageArray, principalMatrix);
        System.out.println("降维后的矩阵: ");
        System.out.println(resultMatrix.getRowDimension() + " × " + resultMatrix.getColumnDimension());
        resultMatrix.print(6, 6);
        System.out.println("----------------------------");

        return resultMatrix.getArray();
    }

    /**
     *
     * 使每个样本的均值为0
     *
     * @param primary 原始二维数组矩阵
     * @return averageArray 中心化后的矩阵
     */
    public double[][] changeAverageToZero(double[][] primary) {
        int n = primary.length;
        int m = primary[0].length;
        double[] sum = new double[m];
        double[] average = new double[m];
        double[][] averageArray = new double[n][m];
        for (int i = 0; i < m; i++) {
            sum[i] = 0;
            for (int j = 0; j < n; j++) {
                sum[i] += primary[j][i];
            }
            average[i] = sum[i] / n;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                averageArray[j][i] = primary[j][i] - average[i];
            }
        }
        return averageArray;
    }

    /**
     *
     * 计算协方差矩阵
     *
     * @param matrix 中心化后的矩阵
     * @return result 协方差矩阵
     */
    public double[][] getVarianceMatrix(double[][] matrix) {
        int n = matrix.length;// 行数
        int m = matrix[0].length;// 列数
        double[][] result = new double[m][m];// 协方差矩阵
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                double temp = 0;
                for (int k = 0; k < n; k++) {
                    temp += matrix[k][i] * matrix[k][j];
                }
                result[i][j] = temp / (n - 1);
            }
        }
        return result;
    }

    /**
     * 求特征值矩阵
     *
     * @param matrix 协方差矩阵
     * @return result 向量的特征值二维数组矩阵
     */
    public double[][] getEigenvalueMatrix(double[][] matrix) {
        Matrix A = new Matrix(matrix);
        // 由特征值组成的对角矩阵,eig()获取特征值
//      A.eig().getD().print(10, 6);
        double[][] result = A.eig().getD().getArray();
        return result;
    }

    /**
     * 标准化矩阵（特征向量矩阵）
     *
     * @param matrix 特征值矩阵
     * @return result 标准化后的二维数组矩阵
     */
    public double[][] getEigenVectorMatrix(double[][] matrix) {
        Matrix A = new Matrix(matrix);
//      A.eig().getV().print(6, 2);
        double[][] result = A.eig().getV().getArray();
        return result;
    }

    /**
     * 寻找主成分
     *
     * @param primaryArray
     * @param eigenvalue 特征值二维数组
     * @param eigenVectors 特征向量二维数组
     * @param threshold
     * @return principalMatrix 主成分矩阵
     */
    public Matrix getPrincipalComponent(double[][] primaryArray,
            double[][] eigenvalue, double[][] eigenVectors, double threshold) {
        Matrix A = new Matrix(eigenVectors);// 定义一个特征向量矩阵
        double[][] tEigenVectors = A.transpose().getArray();// 特征向量转置
        Map<Integer, double[]> principalMap = new HashMap<>();// key=主成分特征值\tvalue=该特征值对应的特征向量
        TreeMap<Double, double[]> eigenMap = new TreeMap<>(Collections.reverseOrder());// key=特征值\tvalue=对应的特征向量；初始化为翻转排序\t使map按key值降序排列
        double total = 0;// 存储特征值总和
        int index = 0, n = eigenvalue.length;
        double[] eigenvalueArray = new double[n];// 把特征值矩阵对角线上的元素放到数组eigenvalueArray里
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    eigenvalueArray[index] = eigenvalue[i][j];
                }
            }
            index++;
        }

        for (int i = 0; i < tEigenVectors.length; i++) {
            double[] value = tEigenVectors[i];
            eigenMap.put(eigenvalueArray[i], value);
        }

        // 求特征总和
        for (int i = 0; i < n; i++) {
            total += eigenvalueArray[i];
        }
        // 选出前几个主成分
        double temp = 0;
        int principalComponentNum = 0;// 主成分数
        List<Double> plist = new ArrayList<>();// 主成分特征值
        for (double key : eigenMap.keySet()) {
            if (temp / total <= threshold) {
                temp += key;
                plist.add(key);
                principalComponentNum++;
            }
        }
        System.out.println("\n" + "当前阈值: " + threshold);
        System.out.println("取得的主成分数: " + principalComponentNum + "\n");

        // 往主成分map里输入数据
        for (int i = 0; i < plist.size(); i++) {
            if (eigenMap.containsKey(plist.get(i))) {
                principalMap.put(i, eigenMap.get(plist.get(i)));
            }
        }

        // 把map里的值存到二维数组里
        double[][] principalArray = new double[principalMap.size()][];
        Iterator<Entry<Integer, double[]>> it = principalMap.entrySet()
                .iterator();
        for (int i = 0; it.hasNext(); i++) {
            principalArray[i] = it.next().getValue();
        }

        Matrix principalMatrix = new Matrix(principalArray);

        return principalMatrix;
    }

    /**
     * 矩阵相乘
     * 将样本点投影到选取的特征向量上。假设样例数为m，特征数为n，减去均值后的样本矩阵为DataAdjust(m*n)，协方差矩阵是n*n，选取的k个特征向量组成的矩阵为EigenVectors(n*k)。那么投影后的数据FinalData为
     * FinalData(10*1) = DataAdjust(10*2矩阵) x 特征向量(-0.677873399, -0.735178656)T
     *
     * @param primary 原始二维数组
     * @param principalMatrix
     *
     * @return result 结果矩阵
     */
    public Matrix getResult(double[][] primary, Matrix principalMatrix) {
        Matrix primaryMatrix = new Matrix(primary);
        Matrix result = primaryMatrix.times(principalMatrix.transpose());
        return result;

    }

    private static synchronized void print(double[][] data) {
        for (double[] data1 : data) {
            for (int j = 0; j < data1.length; j++) {
                System.out.printf(data1[j] + "\t");
            }
            System.out.println();
        }
        System.out.println("----------" + data.length + " × " + data[0].length + "-------------\n");
    }

    private static double[][] getdatas() {

        double[][] datas = {
            {0.832048072, 73.03390082, 24.70331421, 12.4819988, 27.6778228, 26.80500448, 22.87497524, 1611.866667, 455.8974359, 784.3968254, 519.6031746, 1.422538866, 67.14713723, 31.4303239, 70.61577405, 1.453401222, 82.72546419, 928.9541857},
            {0.788242023, 70.69339587, 27.51257289, 12.22430323, 30.10615193, 23.95645488, 19.35157256, 2138.888889, 611.1111111, 1403.285714, 722.1825397, 1.758479873, 65.53046087, 32.71105925, 75.37862877, 1.767191556, 82.86152025, 934.4192484},
            {0.816582026, 69.19827645, 27.88796839, 11.15139897, 30.0349913, 21.79342805, 17.91055964, 2788.444444, 807.7777778, 1774.238095, 825.8333333, 8.394456455, 58.8191013, 32.78644225, 67.99692342, 2.150355111, 85.26512677, 939.1568189},
            {1.026762193, 77.42281641, 17.07385873, 17.22433324, 24.2527178, 45.2513827, 31.5551653, 1632.444444, 528.034188, 740.1111111, 532.0634921, 5.381204915, 66.13819747, 28.48059761, 74.48019342, 1.978532889, 86.51521257, 944.0008517},
            {0.875773027, 73.15206063, 23.66735333, 16.01438498, 28.57630683, 34.0840495, 23.94314019, 2194.844444, 525.5641026, 921.6984127, 582.0634921, 6.604572396, 64.88448046, 28.51094714, 96.28489961, 2.041462778, 84.18075401, 943.308847},
            {1.016208117, 78.05733164, 17.81075212, 14.24626738, 22.80743598, 38.65535309, 31.17276475, 2130.177778, 530.3418803, 740.7460317, 580.4365079, 1.629868284, 71.01929941, 27.35083231, 91.38392071, 1.941591111, 82.89763346, 946.5559459},
            {0.884989581, 77.91769266, 18.01482118, 13.80371901, 22.69530365, 37.46063256, 30.90372958, 2250.266667, 553.7606838, 915.1904762, 604.4444444, 1.37073961, 69.69910898, 28.93015141, 93.70797963, 1.559931, 83.90466431, 957.5747897},
            {0.829877858, 50.94892179, 41.68618434, 20.15019325, 46.30091236, 25.79828882, 9.726499777, 1994.533333, 1175.726496, 631.0634921, 247.5396825, 2.476104519, 59.34653205, 38.17736343, 41.10877302, 1.077540111, 21.43377966, 908.1585578},
            {0.884989581, 66.93209977, 27.92377866, 18.76512911, 33.64326964, 33.90160903, 17.48419095, 3811.377778, 988.7179487, 3223.761905, 1199.484127, 2.120585021, 53.34945474, 44.52996024, 17.47371684, 2.122434, 88.13322817, 872.3340076},
            {1.026894702, 54.58387491, 34.47550704, 33.40949834, 48.00787439, 44.10018568, 21.8524197, 1878.755556, 1062.820513, 564.3968254, 880.9126984, 0.572938221, 60.8362402, 38.59082158, 81.27990431, 5.2191, 30.20982015, 872.617907},
            {0.947251738, 72.9849145, 22.93767505, 13.26705432, 26.49828168, 30.04277267, 23.94362938, 2689.866667, 792.8205128, 1827.253968, 810.4761905, 14.775731, 51.59313977, 33.63112923, 59.1572925, 2.176128444, 85.59424114, 955.2148763},
            {0.853275111, 79.23020639, 19.4483916, 6.878118419, 20.62884041, 19.47635335, 31.36737555, 2234.666667, 622.4786325, 2039.15873, 692.2619048, 29.04965889, 38.64599624, 32.30434487, 38.20572312, 1.512679889, 82.19542038, 972.7634054},
            {0.881390434, 68.89733336, 27.37353892, 13.80695031, 30.65852783, 26.76577321, 18.05603861, 2968.844444, 821.7948718, 1501.222222, 801.547619, 9.403656214, 60.70061068, 29.89573311, 80.59382662, 2.124796556, 87.2288056, 942.6523297},
            {0.725662595, 65.06003164, 33.84240204, 10.22971567, 35.35472023, 16.8188529, 11.51628948, 3058.444444, 837.6923077, 1854.873016, 873.9285714, 5.792253521, 58.04257362, 36.16517286, 70.98702809, 1.929563556, 87.79804374, 929.4687533},
            {0.927632957, 71.73969654, 25.35429471, 17.10524738, 30.58508535, 34.00643552, 22.07043311, 3249.333333, 849.4017094, 1545.666667, 946.9444444, 1.850955488, 63.85409204, 34.29495247, 55.97179776, 2.426344556, 87.5356446, 942.1732496},
            {0.653947379, 60.33863336, 40.10427278, 8.751700268, 41.04824343, 12.30958016, 6.966795371, 2755.466667, 699.7435897, 1765.507937, 825.3968254, 5.433409874, 58.05396096, 36.51262916, 95.41875411, 2.147133444, 85.81914429, 910.4829838},
            {0.925588063, 53.81550707, 38.413372, 28.65091906, 47.92155857, 36.71746036, 16.81721726, 1973.866667, 1295.384615, 721.6984127, 121.0714286, 7.334346288, 55.46043304, 37.20522068, 61.15836451, 3.715655556, 22.96435405, 888.7646829},
            {0.983788901, 68.52988254, 26.38508328, 17.59434966, 31.71332408, 33.69665086, 19.15131305, 1558.177778, 968.1196581, 405.5079365, 155.4365079, 9.898277802, 59.63853414, 30.46318806, 24.10606669, 3.222096222, 10.70847641, 961.3896874},
            {0.984642646, 68.41876842, 26.55073336, 17.46107675, 31.7778449, 33.330885, 18.92869561, 1546.577778, 961.2820513, 406.4603175, 150.9126984, 8.965170818, 58.8513041, 32.18352508, 25.41492474, 4.242290667, 13.21135536, 959.3491607},
            {0.949221447, 60.2128812, 32.76158862, 24.94247557, 41.17585087, 37.28308831, 15.24267798, 1495.555556, 1089.316239, 559, 122.8174603, 11.59851531, 51.70681419, 36.69467051, 50.48608783, 3.691385667, 30.32218686, 915.4689663},
            {0.734435193, 52.29567767, 42.45261811, 18.33943084, 46.24458872, 23.36391615, 8.143870009, 1507.466667, 991.1111111, 411.2222222, 231.6666667, 3.17596696, 62.81934322, 34.00468982, 39.01602139, 2.263757778, 7.809311816, 902.6580077},
            {0.770820523, 64.21917534, 33.42279197, 11.45166591, 35.33024768, 18.91287552, 10.80498426, 1817.644444, 532.3076923, 1412.015873, 535.9126984, 8.760617185, 53.74632547, 37.49305734, 38.28260518, 1.946316222, 86.96294034, 913.2332588},
            {0.792235981, 72.38103968, 26.21822051, 7.620162086, 27.30321263, 16.20582159, 21.88163722, 2300.755556, 1314.102564, 816.6190476, 425.7936508, 25.53276621, 40.76857506, 33.69865873, 26.75491745, 1.567448222, 76.43877945, 954.5761028},
            {0.763267663, 52.47208339, 43.21002045, 16.02747773, 46.08735634, 20.35225661, 6.951348396, 967.6, 357.9487179, 896.7777778, 356.1507937, 16.11562208, 44.16291981, 39.7214581, 31.25517142, 1.020194444, 99.13020985, 903.740374},
            {0.805391789, 47.72029101, 43.49539538, 26.25883974, 50.80745967, 31.12011074, 16.81918253, 2196.533333, 1295.726496, 832.6507937, 228.1349206, 12.83153129, 50.67649934, 36.49196937, 45.49657206, 3.374373667, 18.29071419, 851.5916108},
            {0.835458544, 49.38697477, 42.42768342, 25.33108594, 49.41435177, 30.83870427, 15.05792684, 2020.688889, 1102.820513, 635.3492063, 208.4920635, 8.211850112, 55.3852415, 36.40290839, 40.08390542, 1.222515111, 27.26065092, 857.4292913},
            {0.786020942, 44.49049215, 44.86294844, 18.14378837, 48.39304313, 22.01983251, 13.62224758, 1944.088889, 1196.324786, 704.7619048, 383.8492063, 13.690208, 56.00100082, 30.30879119, 34.25943269, 1.597302333, 7.650471356, 875.3504383}};

        double[][] test = {
            {2.5, 2.4},
            {0.5, 0.7},
            {2.2, 2.9},
            {1.9, 2.2},
            {3.1, 3.0},
            {2.3, 2.7},
            {2, 1.6},
            {1, 1.1},
            {1.5, 1.6},
            {1.1, 0.9}
        };
        double[][] test2 = {
            {0.9, 1},
            {2.4, 2.6},
            {1.2, 1.7},
            {0.5, 0.7},
            {0.3, 0.7},
            {1.8, 1.4},
            {0.5, 0.6},
            {0.3, 0.6},
            {2.5, 2.6},
            {1.3, 1.1}
        };

        double[][] hua = {
            {5.1, 3.5, 1.4, 0.2},
            {4.9, 3.0, 1.4, 0.2},
            {4.7, 3.2, 1.3, 0.2},
            {4.6, 3.1, 1.5, 0.2},
            {5.0, 3.6, 1.4, 0.2},
            {5.4, 3.9, 1.7, 0.4},
            {4.6, 3.4, 1.4, 0.3},
            {5.0, 3.4, 1.5, 0.2},
            {4.4, 2.9, 1.4, 0.2},
            {4.9, 3.1, 1.5, 0.1},
            {5.4, 3.7, 1.5, 0.2},
            {4.8, 3.4, 1.6, 0.2},
            {4.8, 3.0, 1.4, 0.1},
            {4.3, 3.0, 1.1, 0.1},
            {5.8, 4.0, 1.2, 0.2},
            {5.7, 4.4, 1.5, 0.4},
            {5.4, 3.9, 1.3, 0.4},
            {5.1, 3.5, 1.4, 0.3},
            {5.7, 3.8, 1.7, 0.3},
            {5.1, 3.8, 1.5, 0.3},
            {5.4, 3.4, 1.7, 0.2},
            {5.1, 3.7, 1.5, 0.4},
            {4.6, 3.6, 1.0, 0.2},
            {5.1, 3.3, 1.7, 0.5},
            {4.8, 3.4, 1.9, 0.2},
            {5.0, 3.0, 1.6, 0.2},
            {5.0, 3.4, 1.6, 0.4},
            {5.2, 3.5, 1.5, 0.2},
            {5.2, 3.4, 1.4, 0.2},
            {4.7, 3.2, 1.6, 0.2},
            {4.8, 3.1, 1.6, 0.2},
            {5.4, 3.4, 1.5, 0.4},
            {5.2, 4.1, 1.5, 0.1},
            {5.5, 4.2, 1.4, 0.2},
            {4.9, 3.1, 1.5, 0.1},
            {5.0, 3.2, 1.2, 0.2},
            {5.5, 3.5, 1.3, 0.2},
            {4.9, 3.1, 1.5, 0.1},
            {4.4, 3.0, 1.3, 0.2},
            {5.1, 3.4, 1.5, 0.2},
            {5.0, 3.5, 1.3, 0.3},
            {4.5, 2.3, 1.3, 0.3},
            {4.4, 3.2, 1.3, 0.2},
            {5.0, 3.5, 1.6, 0.6},
            {5.1, 3.8, 1.9, 0.4},
            {4.8, 3.0, 1.4, 0.3},
            {5.1, 3.8, 1.6, 0.2},
            {4.6, 3.2, 1.4, 0.2},
            {5.3, 3.7, 1.5, 0.2},
            {5.0, 3.3, 1.4, 0.2},
            {7.0, 3.2, 4.7, 1.4},
            {6.4, 3.2, 4.5, 1.5},
            {6.9, 3.1, 4.9, 1.5},
            {5.5, 2.3, 4.0, 1.3},
            {6.5, 2.8, 4.6, 1.5},
            {5.7, 2.8, 4.5, 1.3},
            {6.3, 3.3, 4.7, 1.6},
            {4.9, 2.4, 3.3, 1.0},
            {6.6, 2.9, 4.6, 1.3},
            {5.2, 2.7, 3.9, 1.4},
            {5.0, 2.0, 3.5, 1.0},
            {5.9, 3.0, 4.2, 1.5},
            {6.0, 2.2, 4.0, 1.0},
            {6.1, 2.9, 4.7, 1.4},
            {5.6, 2.9, 3.6, 1.3},
            {6.7, 3.1, 4.4, 1.4},
            {5.6, 3.0, 4.5, 1.5},
            {5.8, 2.7, 4.1, 1.0},
            {6.2, 2.2, 4.5, 1.5},
            {5.6, 2.5, 3.9, 1.1},
            {5.9, 3.2, 4.8, 1.8},
            {6.1, 2.8, 4.0, 1.3},
            {6.3, 2.5, 4.9, 1.5},
            {6.1, 2.8, 4.7, 1.2},
            {6.4, 2.9, 4.3, 1.3},
            {6.6, 3.0, 4.4, 1.4},
            {6.8, 2.8, 4.8, 1.4},
            {6.7, 3.0, 5.0, 1.7},
            {6.0, 2.9, 4.5, 1.5},
            {5.7, 2.6, 3.5, 1.0},
            {5.5, 2.4, 3.8, 1.1},
            {5.5, 2.4, 3.7, 1.0},
            {5.8, 2.7, 3.9, 1.2},
            {6.0, 2.7, 5.1, 1.6},
            {5.4, 3.0, 4.5, 1.5},
            {6.0, 3.4, 4.5, 1.6},
            {6.7, 3.1, 4.7, 1.5},
            {6.3, 2.3, 4.4, 1.3},
            {5.6, 3.0, 4.1, 1.3},
            {5.5, 2.5, 4.0, 1.3},
            {5.5, 2.6, 4.4, 1.2},
            {6.1, 3.0, 4.6, 1.4},
            {5.8, 2.6, 4.0, 1.2},
            {5.0, 2.3, 3.3, 1.0},
            {5.6, 2.7, 4.2, 1.3},
            {5.7, 3.0, 4.2, 1.2},
            {5.7, 2.9, 4.2, 1.3},
            {6.2, 2.9, 4.3, 1.3},
            {5.1, 2.5, 3.0, 1.1},
            {5.7, 2.8, 4.1, 1.3},
            {6.3, 3.3, 6.0, 2.5},
            {5.8, 2.7, 5.1, 1.9},
            {7.1, 3.0, 5.9, 2.1},
            {6.3, 2.9, 5.6, 1.8},
            {6.5, 3.0, 5.8, 2.2},
            {7.6, 3.0, 6.6, 2.1},
            {4.9, 2.5, 4.5, 1.7},
            {7.3, 2.9, 6.3, 1.8},
            {6.7, 2.5, 5.8, 1.8},
            {7.2, 3.6, 6.1, 2.5},
            {6.5, 3.2, 5.1, 2.0},
            {6.4, 2.7, 5.3, 1.9},
            {6.8, 3.0, 5.5, 2.1},
            {5.7, 2.5, 5.0, 2.0},
            {5.8, 2.8, 5.1, 2.4},
            {6.4, 3.2, 5.3, 2.3},
            {6.5, 3.0, 5.5, 1.8},
            {7.7, 3.8, 6.7, 2.2},
            {7.7, 2.6, 6.9, 2.3},
            {6.0, 2.2, 5.0, 1.5},
            {6.9, 3.2, 5.7, 2.3},
            {5.6, 2.8, 4.9, 2.0},
            {7.7, 2.8, 6.7, 2.0},
            {6.3, 2.7, 4.9, 1.8},
            {6.7, 3.3, 5.7, 2.1},
            {7.2, 3.2, 6.0, 1.8},
            {6.2, 2.8, 4.8, 1.8},
            {6.1, 3.0, 4.9, 1.8},
            {6.4, 2.8, 5.6, 2.1},
            {7.2, 3.0, 5.8, 1.6},
            {7.4, 2.8, 6.1, 1.9},
            {7.9, 3.8, 6.4, 2.0},
            {6.4, 2.8, 5.6, 2.2},
            {6.3, 2.8, 5.1, 1.5},
            {6.1, 2.6, 5.6, 1.4},
            {7.7, 3.0, 6.1, 2.3},
            {6.3, 3.4, 5.6, 2.4},
            {6.4, 3.1, 5.5, 1.8},
            {6.0, 3.0, 4.8, 1.8},
            {6.9, 3.1, 5.4, 2.1},
            {6.7, 3.1, 5.6, 2.4},
            {6.9, 3.1, 5.1, 2.3},
            {5.8, 2.7, 5.1, 1.9},
            {6.8, 3.2, 5.9, 2.3},
            {6.7, 3.3, 5.7, 2.5},
            {6.7, 3.0, 5.2, 2.3},
            {6.3, 2.5, 5.0, 1.9},
            {6.5, 3.0, 5.2, 2.0},
            {6.2, 3.4, 5.4, 2.3},
            {5.9, 3.0, 5.1, 1.8}
        };
        return hua;
    }

    static double[][] tran(double[][] datas) {
        double[][] result = new double[datas[0].length][datas.length];//转置
        for (int i = 0; i < datas.length; i++) {
            for (int j = 0; j < datas[i].length; j++) {
                result[j][i] = datas[i][j];
            }
        }
        return result;
    }

}
